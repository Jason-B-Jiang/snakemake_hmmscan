stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(linker length in species ortholog / linker length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24)) +
theme_bw()
# helper function to round p values to n significant digits
# taken from https://stackoverflow.com/questions/43050903/round-to-significant-digits-only-with-decimal-portion-of-number-in-r
my_signif = function(x, digits) floor(x) + signif(x %% 1, digits)
# dataframe holding overall species vs yeast domain and linker length diffs
# p values
# f_labels <- data.frame(type = c('domain', 'linker'),
#                        label = c(str_c('overall: p = ', my_signif(p_domains, 2)),
#                                  str_c('overall: p = ', my_signif(p_linkers, 2))))
# add overall p-values for microsporidia domains vs yeast domains lengths,
# microsporidia linkers vs yeast linkers lengths to the boxplot
# boxplt <- boxplt +
#   geom_label(x = 1.9, y = -5.5, aes(label = label), data = f_labels)
dom_plot
linker_plot
# do some really weird stuff for plotting
dom_linkers <- rbind(domains, linkers)  # combine dataframes for plotting
dom_plot <- ggplot(data = filter(dom_linkers, type == 'domain', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(domain length in species ortholog / domain length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24)) +
theme_bw()
linker_plot <- ggplot(data = filter(dom_linkers, type == 'linker', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(linker length in species ortholog / linker length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24)) +
theme_bw()
dom_plot
linker_plot
view(linkers)
?mena
?mena
?mean
# dataframe just for unique linker values
linkers <- distinct(domain_archs, species_ortholog, .keep_all = T) %>%
select(species, essential, yeast_ortholog, species_ortholog,
species_linker_len, yeast_linker_len, linker_ratio) %>%
rename(length_ratio = linker_ratio,
species_len = species_linker_len,
yeast_len = yeast_linker_len) %>%
mutate(type = 'linker') %>%
group_by(essential) %>%
mutate(sd_by_essential = sd(length_ratio, na.rm=T),
mean_by_essential = mean(length_ratio, na.rm=T),
is_outlier = abs(length_ratio - mean(domains$length_ratio, na.rm = T)) > 1.5 * sd_by_essential)
# dataframe just for aligned domain lengths
domains <- domain_archs %>%
select(species, essential, yeast_ortholog, species_ortholog,
aligned_species_domain_len, aligned_yeast_domain_len,
domain_ratio) %>%
rename(length_ratio = domain_ratio,
species_len = aligned_species_domain_len,
yeast_len = aligned_yeast_domain_len) %>%
mutate(type = 'domain') %>%
group_by(essential) %>%
mutate(sd_by_essential = sd(length_ratio, na.rm=T),
mean_by_essential = mean(length_ratio, na.rm=T),
is_outlier = abs(length_ratio - mean(domains$length_ratio, na.rm = T)) > 1.5 * sd_by_essential)
# p-values for difference between species + yeast ortholog linker and domain
# lengths
p_domains <- wilcox.test(domains$species_len,
domains$yeast_len,
paired = T)$p.value  # -4 AA med diff, 97% of length
p_linkers <- wilcox.test(linkers$species_len,
linkers$yeast_len,
paired = T)$p.value
# p-values for differences in domain/linker lengths between essential and
# non-essential ortholog pairs
# 97% in essential, 95.5% in non-essential
# greater significance than linkers due to larger sample size
p_domains_essential <- wilcox.test(filter(domains, essential)$length_ratio,
filter(domains, !essential)$length_ratio)$p.value
# 73.6% in essential, 71.3% in non-essential
p_linkers_essential <- wilcox.test(filter(linkers, essential)$length_ratio,
filter(linkers, !essential)$length_ratio)$p.value
view(linkers)
view(domains)
# do some really weird stuff for plotting
dom_linkers <- rbind(domains, linkers)  # combine dataframes for plotting
dom_plot <- ggplot(data = filter(dom_linkers, type == 'domain', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(domain length in species ortholog / domain length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24)) +
theme_bw()
linker_plot <- ggplot(data = filter(dom_linkers, type == 'linker', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(linker length in species ortholog / linker length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24)) +
theme_bw()
dom_plot
linker_plot
dom_plot
linker_plot
# do some really weird stuff for plotting
dom_linkers <- rbind(domains, linkers)  # combine dataframes for plotting
dom_plot <- ggplot(data = filter(dom_linkers, type == 'domain', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(domain length in species ortholog / domain length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24)) +
linker_plot <- ggplot(data = filter(dom_linkers, type == 'linker', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'linker length in species ortholog / linker length in yeast ortholog',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24))
dom_linkers <- rbind(domains, linkers)  # combine dataframes for plotting
dom_plot <- ggplot(data = filter(dom_linkers, type == 'domain', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(domain length in species ortholog / domain length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24))
linker_plot <- ggplot(data = filter(dom_linkers, type == 'linker', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'linker length in species ortholog / linker length in yeast ortholog',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 24),
axis.text = element_text(color = 'black', size = 24),
plot.title = element_text(size = 24))
dom_plot
linker_lot
dom_plot <- ggplot(data = filter(dom_linkers, type == 'domain', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'ln(domain length in species ortholog / domain length in yeast ortholog)',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 18),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 24))
linker_plot <- ggplot(data = filter(dom_linkers, type == 'linker', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'linker length in species ortholog / linker length in yeast ortholog',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 18),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 24))
dom_plot
dom_plot <- ggplot(data = filter(dom_linkers, type == 'domain', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'domain length in species ortholog / domain length in yeast ortholog',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 18),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 24))
linker_plot <- ggplot(data = filter(dom_linkers, type == 'linker', !is_outlier),
aes(x = essential, y = length_ratio)) +
geom_violin(show.legend = F, aes(fill = essential)) +
stat_summary(fun = "median", fun.min = "median", fun.max= "median",
size= 0.3, geom = "crossbar") +
geom_signif(comparisons = list(c('TRUE', 'FALSE'))) +
labs(x = 'Essential?',
y = 'linker length in species ortholog / linker length in yeast ortholog',
title = str_c(name, '\nn = ', nrow(linkers),
' species-yeast ortholog pairs\n')) +
theme_bw() +
theme(axis.title = element_text(color = 'black', size = 18),
axis.text = element_text(color = 'black', size = 18),
plot.title = element_text(size = 24))
dom_plot
linker_plot
dom_plot
domains <- domains %>%
group_by(essential) %>%
mutate(median_ratio = median(length_ratio, na.rm=T))
linkers <- linkerss %>%
group_by(essential) %>%
mutate(median_ratio = median(length_ratio, na.rm=T))
linkers <- linkers %>%
group_by(essential) %>%
mutate(median_ratio = median(length_ratio, na.rm=T))
view(domains)
view(linkers)
180 / 16880
linker_lot
linker_plot
mean(linkers$length_ratio, na.rm = T)
10 - 1.32
sd(linkers$length_ratio, na.rm = T)
8.68 / 6
# -----------------------------------------------------------------------------
#
# Clean microsporidia name + host data for predictions
#
# Jason Jiang - Created: 2022/07/29
#               Last edited: 2022/09/09
#
# Reinke Lab - Microsporidia orthologs
#
# Clean up microsporidia/host name data for predicting with rule-based methods,
# and add info about where each microsporidia/host name are found in text.
#
# -----------------------------------------------------------------------------
library(tidyverse)
library(readxl)
# TODO - replace w/ command line arguments
ptc_data <- readxl::read_xls('../../supp_11.xls')
# TODO - replace w/ command line arguments
ptc_data <- readxl::read_xls('../../data/supp_11.xls')
view(ptc_data)
ptc_data <- ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`)
view(ptc_data)
?rename
ptc_data <- select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`)
ptc_data  = readxl::read_xls('../../data/supp_11.xls')
ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`)
ptc_data =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`)
view(ptc_data)
ptc_data  = readxl::read_xls('../../data/supp_11.xls')
x = ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end)
view(x)
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position)
view(x)
view(x)
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T)
view(x)
sum(x$ptc_position)
colnames(x)
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end)
view(x)
length(unique(x$gene))
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end) %>%
distinct(.keep_all = T)
view(x)
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end) %>%
distinct(.keep_all = T) %>%
ungroup() %>%
rowwise() %>%
mutate(gene = sgd_to_uniprot_names[[gene]])
view(x)
ptc_tolerance = 'D, D, D, D, D, D, D, D, D, A'
ptc_position = '61, 92, 94, 99, 111, 116, 119, 148, 163, 172'
ptc_tolerance <- str_split(ptc_tolerance, ', ')[[1]]
ptc_position <- str_split(ptc_position, ', ')[[1]]
which(ptc_tolerance == 'A')
which(ptc_tolerance == 'A')[1]
ptc_position[which(ptc_tolerance == 'A')[1]]
which(ptc_tolerance == 'D')
tail(which(ptc_tolerance == 'D'), n = 1)
ptc_position[tail(which(ptc_tolerance == 'D'), n = 1)]
get_critical_ptc_position <- function(ptc_tolerance, ptc_position) {
# ---------------------------------------------------------------------------
# Return corresponding position of the last lethal PTC in a gene
# ---------------------------------------------------------------------------
ptc_tolerance <- str_split(ptc_tolerance, ', ')[[1]]
ptc_position <- str_split(ptc_position, ', ')[[1]]
return(ptc_position[tail(which(ptc_tolerance == 'D'), n = 1)])
}
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end) %>%
distinct(.keep_all = T) %>%
ungroup() %>%
mutate(critical_ptc_position = get_critical_ptc_position(ptc_tolerance,
ptc_position)) %>%
rowwise() %>%
mutate(gene = sgd_to_uniprot_names[[gene]])
view(x)
get_critical_ptc_position <- Vectorize(function(ptc_tolerance, ptc_position) {
# ---------------------------------------------------------------------------
# Return corresponding position of the last lethal PTC in a gene
# ---------------------------------------------------------------------------
ptc_tolerance <- str_split(ptc_tolerance, ', ')[[1]]
ptc_position <- str_split(ptc_position, ', ')[[1]]
return(ptc_position[tail(which(ptc_tolerance == 'D'), n = 1)])
}, vectorize.args = c('ptc_tolerance', 'ptc_position'))
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end) %>%
distinct(.keep_all = T) %>%
ungroup() %>%
mutate(critical_ptc_position = get_critical_ptc_position(ptc_tolerance,
ptc_position)) %>%
rowwise() %>%
mutate(gene = sgd_to_uniprot_names[[gene]])
view(x)
get_critical_ptc_position <- Vectorize(function(ptc_tolerance, ptc_position) {
# ---------------------------------------------------------------------------
# Return corresponding position of the last lethal PTC in a gene
# ---------------------------------------------------------------------------
ptc_tolerance <- str_split(ptc_tolerance, ', ')[[1]]
ptc_position <- str_split(ptc_position, ', ')[[1]]
# corresponding ptc position in gene for last lethal ptc
critical_ptc_position <- ptc_position[tail(which(ptc_tolerance == 'D'), n = 1)]
if (length(critical_ptc_position) == 0) {
# all PTCs in this gene are tolerated
return(NA)
}
return(critical_ptc_position)
}, vectorize.args = c('ptc_tolerance', 'ptc_position'))
x =     ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, cds_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = cds_length - dist_from_cds_end) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end) %>%
distinct(.keep_all = T) %>%
ungroup() %>%
mutate(critical_ptc_position = get_critical_ptc_position(ptc_tolerance,
ptc_position)) %>%
rowwise() %>%
mutate(gene = sgd_to_uniprot_names[[gene]])
view(x)
view(filter(x, is.na(critical_ptc_position)))
ortholog_alignments <- read_rds('../../resources/ortholog_alignments.rds')
source("~/Desktop/Projects/snakemake_hmmscan/workflow/scripts/get_percent_lost_essential_AAs.R", echo=TRUE)
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
ortholog_alignments <- read_rds('../../resources/ortholog_alignments.rds')
orthogroups <- read_csv('../../data/orthogroups.csv')
view(orthogroups)
ortholog_alignments[['KCZ81398.1']]
ortholog_alignments[['KCZ81398.1']]
ortholog_alignments[['KCZ81398.1']]$species_alignment
integer()
str_length(ortholog_alignments[['KCZ81398.1']]$species_alignment)
'-' == '-'
str_c(c(1, 2, 3), collapse = '; ')
unique(c('A', 'D', 'A'))
all(c('A', 'D', 'A') == 'A')
all(c('A', 'A', 'A') == 'A')
