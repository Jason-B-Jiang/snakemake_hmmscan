# ------------------------------------------------------------------------------
require(tidyverse)
################################################################################
## Define global variables
# Column names for cath-resolve-hits output files
CRH_HEADER = c('query_id', 'match_id', 'score', 'boundaries',
'resolved', 'cond_evalue', 'indp_evalue')
################################################################################
main <- function() {
# ---------------------------------------------------------------------------
# Command line arguments:
#   $1 = directory with cath-resolve-hits output files
#   $2 = filepath to dataframe of all pairwise single-copy orthologs
#   $3 = filepath to tsv of Pfam families and their clans (from Pfam ftp
#        site)
#   $4 = filepath to save dataframe of aligned domain architectures to
# ---------------------------------------------------------------------------
args <- commandArgs(trailingOnly = T)
# set directory to read in cath-resolve-hits domain architecture files from
# for each orthogroup
domain_arch_dir <- args[1]
# get root directory (i.e: snakemake_hmmscan/)
base_dir <- dirname(dirname(domain_arch_dir))
# load in dataframe of orthogroups with single copy yeast gene and at least
# single copy microsporidia ortholog, from Orthofinder
orthogroups_df <- read_csv(args[2], show_col_types = F)
# make hashtable mapping Pfam domain families back to their clans
fam_to_clan <- make_pfam_clan_hashtables(args[3], base_dir)
# get hashtable of orthogroups and their ortholog domain architectures
orthogroup_domain_archs <- get_orthogroup_domain_arch_hash(domain_arch_dir,
fam_to_clan)
# assign domain architectures to ortholog pairs in orthogroups_df, and
# align all pairs of single-copy orthologs with Needleman-Wunsch alignment
orthogroups_df <- assign_and_align_domain_archs(orthogroups_df,
orthogroup_domain_archs)
# write modified orthogroups_df dataframe to specified filepath
write_csv(orthogroups_df, args[4])
}
################################################################################
## Helper functions
make_pfam_clan_hashtables <- function(pfam_clans, base_dir) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
pfam_clans <- read_tsv(pfam_clans, show_col_types = F)
# create hashtables mapping both pfam families back to their clans
fam_to_clan <- new.env()
Map(function(fam, clan) {fam_to_clan[[fam]] <- ifelse(is.na(clan), fam, clan)},
pfam_clans$Family_ID, pfam_clans$Clan_name)
# write hashtable to resources folder
saveRDS(fam_to_clan, str_c(base_dir, '/resources/pfam_fam_to_clan.rds'))
return(fam_to_clan)
}
get_orthogroup_domain_arch_hash <- function(domain_arch_dir, fam_to_clan) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# only consider cath-resolve-hits files that are non-empty
files = list.files(domain_arch_dir, full.names = T)[
file.size(list.files(domain_arch_dir, full.names = T)) > 0
]
orthogroups = unname(sapply(files, function(x) {basename(x)}))
domain_arch_hash <- new.env()
Map(function(og, resolved_hits) {
domain_arch_hash[[og]] <- get_og_domain_archs(resolved_hits, fam_to_clan)
},
orthogroups,
files)
return(domain_arch_hash)
}
get_og_domain_archs <- function(resolved_hits, fam_to_clan) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# get dataframe of resolved domain architectures from cath-resolve-hits
# using try-catch block to see cases where we get a warning, just doing
# as a sanity check for myself
tryCatch(
expr = {crh_df <- parse_crh_output(resolved_hits, fam_to_clan)},
warning = function(w) {
message(resolved_hits)
})
# create hashtable mapping each ortholog in the orthogroup to a named list of
# its domain architecture and domain boundaries
og_domain_archs <- new.env()
sapply(1 : nrow(crh_df),
function(i) {
og_domain_archs[[crh_df$query_id[i]]] <- list(
'domain_arch' = crh_df$match_id[i],
'domain_arch_clan' = crh_df$match_clans[i],
'domain_bounds' = crh_df$resolved[i]
)
})
return(og_domain_archs)
}
parse_crh_output <- function(resolved_hits, fam_to_clan) {
# ---------------------------------------------------------------------------
# Read in cath-resolve-hits output file for an orthogroup's ortholog domain
# architectures + domain boundaries
#
# Args:
#   resolved_hits: filepath to cath-resolve-hits output file
#
# ---------------------------------------------------------------------------
return(
read_delim(resolved_hits, delim = ' ', comment = '#',
col_names = CRH_HEADER, show_col_types = F) %>%
select(query_id, match_id, resolved) %>%
group_by(query_id) %>%
mutate(match_id = str_c(match_id, collapse = '; '),
resolved = str_c(resolved, collapse = '; ')) %>%
ungroup() %>%
rowwise() %>%
mutate(match_clans = get_domain_clans(match_id, fam_to_clan)) %>%
ungroup() %>%
group_by(query_id) %>%
distinct(.keep_all = T)
)
}
get_domain_clans <- function(domains, fam_to_clan) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
domains <- str_split(domains, '; ')[[1]]
return(str_c(
# if domain isn't in fam_to_clan hashtable, just keep the domain as is
sapply(domains, function(x) {ifelse(!is.null(fam_to_clan[[x]]),
fam_to_clan[[x]],
x)}),
collapse = '; '))
}
assign_and_align_domain_archs <- function(orthogroups_df,
orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
return(
orthogroups_df %>%
select(-median_diff, -species_p_val, -species_p_val_adj) %>%
rowwise() %>%
mutate(yeast_domain_archs = get_ortholog_domain_arch(orthogroup,
yeast_ortholog,
orthogroup_domain_archs),
species_domain_archs = get_ortholog_domain_arch(orthogroup,
species_ortholog,
orthogroup_domain_archs)) %>%
ungroup() %>%
separate(yeast_domain_archs, c('yeast_domain_arch', 'yeast_domain_arch_clan',
'yeast_domain_bounds'), sep = ' ::: ') %>%
separate(species_domain_archs, c('species_domain_arch', 'species_domain_arch_clan',
'species_domain_bounds'), sep = ' ::: ') %>%
mutate(aligned_ortholog_domain_archs = align_domain_archs(species_domain_arch_clan,
yeast_domain_arch))
)
}
get_ortholog_domain_arch <- function(orthogroup, ortholog, orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is_null(orthogroup_domain_archs[[orthogroup]])) {
return(str_c(c('', '', ''), collapse = ' ::: '))
}
return(str_c(
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch_clan,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_bounds,
sep = ' ::: '
))
}
files = list.files(domain_arch_dir, full.names = T)[
file.size(list.files(domain_arch_dir, full.names = T)) > 0
]
orthogroups = unname(sapply(files, function(x) {basename(x)}))
domain_arch_hash <- new.env()
Map(function(og, resolved_hits) {
domain_arch_hash[[og]] <- get_og_domain_archs(resolved_hits, fam_to_clan)
},
orthogroups[1:500],
files[1:500])
orthogroup_domain_archs[[orthogroup]]
view(parse_crh_output(resolved_hits, fam_to_clan))
orthogroup_domain_archs[[orthogroup]][['EPZ31615.1']]
test = parse_crh_output(resolved_hits, fam_to_clan)
view(test)
get_domain_clans("Ank_2; CLP1_N; CLP1_P; Clp1; Pkinase; CNH; 14-3-3")
get_domain_clans("Ank_2; CLP1_N; CLP1_P; Clp1; Pkinase; CNH; 14-3-3", fam_to_clan)
base_dir
domain_arch_dir
pfam_clans
dirname(dirname("/home/boognish/Desktop/Projects/snakemake_hmmscan/data/Pfam-A-clans.tsv"))
# -----------------------------------------------------------------------------
#
# Align ortholog domain architectures
#
# Jason Jiang - Created: 2022/07/29
#               Last edited: 2022/08/05
#
# Reinke Lab - Microsporidia Orthologs Project
#
# Goal: Align domain architectures between yeast proteins + orthologs from
# other species
#
# Thanks to Brandon Murareanu for this RScript layout
#
#
# ------------------------------------------------------------------------------
require(tidyverse)
################################################################################
## Define global variables
# Column names for cath-resolve-hits output files
CRH_HEADER = c('query_id', 'match_id', 'score', 'boundaries',
'resolved', 'cond_evalue', 'indp_evalue')
domain_arch_dir = "~/Desktop/Projects/snakemake_hmmscan/results/resolved_domain_architectures"
pfam_clans = "/home/boognish/Desktop/Projects/snakemake_hmmscan/data/Pfam-A-clans.tsv"
orthogroups_df <- read_csv( "/home/boognish/Desktop/Projects/snakemake_hmmscan/data/orthogroups.csv”, show_col_types = F)
)
a
32
_{\}
orthogroups_df <- read_csv("/home/boognish/Desktop/Projects/snakemake_hmmscan/data/orthogroups.csv")
# -----------------------------------------------------------------------------
#
# Align ortholog domain architectures
#
# Jason Jiang - Created: 2022/07/29
#               Last edited: 2022/08/05
#
# Reinke Lab - Microsporidia Orthologs Project
#
# Goal: Align domain architectures between yeast proteins + orthologs from
# other species
#
# Thanks to Brandon Murareanu for this RScript layout
#
#
# ------------------------------------------------------------------------------
require(tidyverse)
################################################################################
## Define global variables
# Column names for cath-resolve-hits output files
CRH_HEADER = c('query_id', 'match_id', 'score', 'boundaries',
'resolved', 'cond_evalue', 'indp_evalue')
################################################################################
main <- function() {
# ---------------------------------------------------------------------------
# Command line arguments:
#   $1 = directory with cath-resolve-hits output files
#   $2 = filepath to dataframe of all pairwise single-copy orthologs
#   $3 = filepath to tsv of Pfam families and their clans (from Pfam ftp
#        site)
#   $4 = filepath to save dataframe of aligned domain architectures to
# ---------------------------------------------------------------------------
args <- commandArgs(trailingOnly = T)
# set directory to read in cath-resolve-hits domain architecture files from
# for each orthogroup
domain_arch_dir <- args[1]
# load in dataframe of orthogroups with single copy yeast gene and at least
# single copy microsporidia ortholog, from Orthofinder
orthogroups_df <- read_csv(args[2], show_col_types = F)
# make hashtable mapping Pfam domain families back to their clans
fam_to_clan <- make_pfam_clan_hashtables(args[3])
# get hashtable of orthogroups and their ortholog domain architectures
orthogroup_domain_archs <- get_orthogroup_domain_arch_hash(domain_arch_dir,
fam_to_clan)
# assign domain architectures to ortholog pairs in orthogroups_df, and
# align all pairs of single-copy orthologs with Needleman-Wunsch alignment
orthogroups_df <- assign_and_align_domain_archs(orthogroups_df,
orthogroup_domain_archs)
# write modified orthogroups_df dataframe to specified filepath
write_csv(orthogroups_df, args[4])
}
################################################################################
## Helper functions
make_pfam_clan_hashtables <- function(pfam_clans) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
pfam_clans <- read_tsv(pfam_clans, show_col_types = F)
# create hashtables mapping both pfam families back to their clans
fam_to_clan <- new.env()
Map(function(fam, clan) {fam_to_clan[[fam]] <- ifelse(is.na(clan), fam, clan)},
pfam_clans$Family_ID, pfam_clans$Clan_name)
# write hashtable to resources folder
saveRDS(fam_to_clan, str_c(dirname(dirname(pfam_clans)),
'/resources/pfam_fam_to_clan.rds'))
return(fam_to_clan)
}
get_orthogroup_domain_arch_hash <- function(domain_arch_dir, fam_to_clan) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# only consider cath-resolve-hits files that are non-empty
files = list.files(domain_arch_dir, full.names = T)[
file.size(list.files(domain_arch_dir, full.names = T)) > 0
]
orthogroups = unname(sapply(files, function(x) {basename(x)}))
domain_arch_hash <- new.env()
Map(function(og, resolved_hits) {
domain_arch_hash[[og]] <- get_og_domain_archs(resolved_hits, fam_to_clan)
},
orthogroups[1:500],
files[1:500])
return(domain_arch_hash)
}
get_og_domain_archs <- function(resolved_hits, fam_to_clan) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# get dataframe of resolved domain architectures from cath-resolve-hits
# using try-catch block to see cases where we get a warning, just doing
# as a sanity check for myself
tryCatch(
expr = {crh_df <- parse_crh_output(resolved_hits, fam_to_clan)},
warning = function(w) {
message(resolved_hits)
})
# create hashtable mapping each ortholog in the orthogroup to a named list of
# its domain architecture and domain boundaries
og_domain_archs <- new.env()
sapply(1 : nrow(crh_df),
function(i) {
og_domain_archs[[crh_df$query_id[i]]] <- list(
'domain_arch' = crh_df$match_id[i],
'domain_arch_clan' = crh_df$match_clans[i],
'domain_bounds' = crh_df$resolved[i]
)
})
return(og_domain_archs)
}
parse_crh_output <- function(resolved_hits, fam_to_clan) {
# ---------------------------------------------------------------------------
# Read in cath-resolve-hits output file for an orthogroup's ortholog domain
# architectures + domain boundaries
#
# Args:
#   resolved_hits: filepath to cath-resolve-hits output file
#
# ---------------------------------------------------------------------------
return(
read_delim(resolved_hits, delim = ' ', comment = '#',
col_names = CRH_HEADER, show_col_types = F) %>%
select(query_id, match_id, resolved) %>%
group_by(query_id) %>%
mutate(match_id = str_c(match_id, collapse = '; '),
resolved = str_c(resolved, collapse = '; ')) %>%
ungroup() %>%
rowwise() %>%
mutate(match_clans = get_domain_clans(match_id, fam_to_clan)) %>%
ungroup() %>%
group_by(query_id) %>%
distinct(.keep_all = T)
)
}
get_domain_clans <- function(domains, fam_to_clan) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
domains <- str_split(domains, '; ')[[1]]
return(str_c(
# if domain isn't in fam_to_clan hashtable, just keep the domain as is
sapply(domains, function(x) {ifelse(!is.null(fam_to_clan[[x]]),
fam_to_clan[[x]],
x)}),
collapse = '; '))
}
assign_and_align_domain_archs <- function(orthogroups_df,
orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
return(
orthogroups_df %>%
select(-median_diff, -species_p_val, -species_p_val_adj) %>%
rowwise() %>%
mutate(yeast_domain_archs = get_ortholog_domain_arch(orthogroup,
yeast_ortholog,
orthogroup_domain_archs),
species_domain_archs = get_ortholog_domain_arch(orthogroup,
species_ortholog,
orthogroup_domain_archs)) %>%
ungroup() %>%
separate(yeast_domain_archs, c('yeast_domain_arch', 'yeast_domain_arch_clan',
'yeast_domain_bounds'), sep = ' ::: ') %>%
separate(species_domain_archs, c('species_domain_arch', 'species_domain_arch_clan',
'species_domain_bounds'), sep = ' ::: ') %>%
mutate(aligned_ortholog_domain_archs = align_domain_archs(species_domain_arch_clan,
yeast_domain_arch))
)
}
get_ortholog_domain_arch <- function(orthogroup, ortholog, orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is_null(orthogroup_domain_archs[[orthogroup]])) {
return(str_c(c('', '', ''), collapse = ' ::: '))
}
return(str_c(
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch_clan,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_bounds,
sep = ' ::: '
))
}
fam_to_clan <- make_pfam_clan_hashtables(pfam_clans)
make_pfam_clan_hashtables <- function(pfam_clans) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
file_name = pfam_clans
pfam_clans <- read_tsv(pfam_clans, show_col_types = F)
# create hashtables mapping both pfam families back to their clans
fam_to_clan <- new.env()
Map(function(fam, clan) {fam_to_clan[[fam]] <- ifelse(is.na(clan), fam, clan)},
pfam_clans$Family_ID, pfam_clans$Clan_name)
# write hashtable to resources folder
saveRDS(fam_to_clan, str_c(dirname(dirname(file_name)),
'/resources/pfam_fam_to_clan.rds'))
return(fam_to_clan)
}
fam_to_clan <- make_pfam_clan_hashtables(pfam_clans)
orthogroup_domain_archs <- get_orthogroup_domain_arch_hash(domain_arch_dir,
fam_to_clan)
20000/500
40 * 0.4
40 * 0.6
tmp = orthogroups_df %>%
select(-median_diff, -species_p_val, -species_p_val_adj) %>%
rowwise() %>%
mutate(yeast_domain_archs = get_ortholog_domain_arch(orthogroup,
yeast_ortholog,
orthogroup_domain_archs),
species_domain_archs = get_ortholog_domain_arch(orthogroup,
species_ortholog,
orthogroup_domain_archs))
view(orthogroups_df)
orthogroup_domain_archs[['OG0000178']]
orthogroup_domain_archs[['OG000']]
orthogroup_domain_archs[['OG0000178']]
get_ortholog_domain_arch('OG0000178', ''OG0000178'')
get_ortholog_domain_arch('OG0000178', 'P32432')
get_ortholog_domain_arch('OG0000178', 'P32432', orthogroup_domain_archs)
get_ortholog_domain_arch <- function(orthogroup, ortholog, orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is_null(orthogroup_domain_archs[[orthogroup]]) |
is_null(orthogroup_domain_archs[[orthogroup]][[ortholog]])) {
return(str_c(c('', '', ''), collapse = ' ::: '))
}
return(str_c(
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch_clan,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_bounds,
sep = ' ::: '
))
}
test = parse_crh_output('~/Desktop/Projects/snakemake_hmmscan/results/resolved_domain_architectures/OG0000178', fam_to_clan)
view(test)
get_ortholog_domain_arch <- function(orthogroup, ortholog, orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is_null(orthogroup_domain_archs[[orthogroup]]) |
is_null(orthogroup_domain_archs[[orthogroup]][[ortholog]])) {
return(str_c(c('', '', ''), collapse = ' ::: '))
}
return(str_c(
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch_clan,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_bounds,
sep = ' ::: '
))
}
tmp = orthogroups_df %>%
select(-median_diff, -species_p_val, -species_p_val_adj) %>%
rowwise() %>%
mutate(yeast_domain_archs = get_ortholog_domain_arch(orthogroup,
yeast_ortholog,
orthogroup_domain_archs),
species_domain_archs = get_ortholog_domain_arch(orthogroup,
species_ortholog,
orthogroup_domain_archs))
view(tmp)
tmp = orthogroups_df %>%
select(-median_diff, -species_p_val, -species_p_val_adj) %>%
rowwise() %>%
mutate(yeast_domain_archs = get_ortholog_domain_arch(orthogroup,
yeast_ortholog,
orthogroup_domain_archs),
species_domain_archs = get_ortholog_domain_arch(orthogroup,
species_ortholog,
orthogroup_domain_archs)) %>%
ungroup() %>%
separate(yeast_domain_archs, c('yeast_domain_arch', 'yeast_domain_arch_clan',
'yeast_domain_bounds'), sep = ' ::: ') %>%
separate(species_domain_archs, c('species_domain_arch', 'species_domain_arch_clan',
'species_domain_bounds'), sep = ' ::: ')
view(tmp)
get_ortholog_domain_arch <- function(orthogroup, ortholog, orthogroup_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is_null(orthogroup_domain_archs[[orthogroup]]) |
is_null(orthogroup_domain_archs[[orthogroup]][[ortholog]])) {
return(NA)
}
return(str_c(
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_arch_clan,
orthogroup_domain_archs[[orthogroup]][[ortholog]]$domain_bounds,
sep = ' ::: '
))
}
tmp = orthogroups_df %>%
select(-median_diff, -species_p_val, -species_p_val_adj) %>%
rowwise() %>%
mutate(yeast_domain_archs = get_ortholog_domain_arch(orthogroup,
yeast_ortholog,
orthogroup_domain_archs),
species_domain_archs = get_ortholog_domain_arch(orthogroup,
species_ortholog,
orthogroup_domain_archs)) %>%
ungroup() %>%
separate(yeast_domain_archs, c('yeast_domain_arch', 'yeast_domain_arch_clan',
'yeast_domain_bounds'), sep = ' ::: ') %>%
separate(species_domain_archs, c('species_domain_arch', 'species_domain_arch_clan',
'species_domain_bounds'), sep = ' ::: ')
view(tmp)
