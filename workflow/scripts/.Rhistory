get_lost_amino_acid_types <- function(species_lost_residues,
critical_ptc_position,
ptc_tolerance,
ptc_position) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is.na(species_lost_residues)) {
return(NA)
}
species_lost_residues <- as.integer(str_split(species_lost_residues, ', ')[[1]])
lost_residue_types <- sapply(species_lost_residues,
function(a) {classify_lost_amino_acid(a,
ptc_tolerance,
ptc_position,
critical_ptc_position)})
num_essential <- length(lost_residue_types[lost_residue_types == 'essential'])
num_dispensable <- length(lost_residue_types[lost_residue_types == 'dispensable'])
num_unclassified <- length(lost_residue_types[lost_residue_types == 'unclassified'])
return(str_c(num_essential, num_dispensable, num_unclassified, sep = ', '))
}
source("~/Desktop/Projects/snakemake_hmmscan/workflow/scripts/get_percent_lost_essential_AAs.R", echo=TRUE)
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
ortholog_alignments <- read_rds('../../resources/ortholog_alignments.rds')
orthogroups <- read_csv('../../data/orthogroups.csv')
# add columns to orthogroups dataframe indicating number of lost residues
# in species orthologs to yeast, and number of such residues that are
# essential
orthogroups <- annotate_essential_lost_residues(orthogroups, ptc_data,
ortholog_alignments)
view(orthogroups)
112 + 92
view(orthogroups %>%
separate(essential_dispensable_unclassified, c('num_lost_essential', 'num_lost_dispensable', 'num_lost_unclassified'), sep = ', '))
source("~/Desktop/Projects/snakemake_hmmscan/workflow/scripts/get_percent_lost_essential_AAs.R", echo=TRUE)
# TODO - replace w/ command line arguments
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
ortholog_alignments <- read_rds('../../resources/ortholog_alignments.rds')
orthogroups <- read_csv('../../data/orthogroups.csv')
# add columns to orthogroups dataframe indicating number of lost residues
# in species orthologs to yeast, and number of such residues that are
# essential
orthogroups <- annotate_essential_lost_residues(orthogroups, ptc_data,
ortholog_alignments)
view(orthogroups)
sum(orthogroups$num_lost_dispensable)
source("~/Desktop/Projects/snakemake_hmmscan/workflow/scripts/get_percent_lost_essential_AAs.R", echo=TRUE)
# TODO - replace w/ command line arguments
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
ortholog_alignments <- read_rds('../../resources/ortholog_alignments.rds')
orthogroups <- read_csv('../../data/orthogroups.csv')
# add columns to orthogroups dataframe indicating number of lost residues
# in species orthologs to yeast, and number of such residues that are
# essential
orthogroups <- annotate_essential_lost_residues(orthogroups, ptc_data,
ortholog_alignments)
sum(orthogroups$num_lost_dispensable)
view(orthogroups)
orthogroups <- select(orthogroups, species, is_microsp, yeast_ortholog, species_ortholog, num_lost_essential, num_lost_dispensable, num_lost_unclassified, num_lost)
view(orthogroups)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Stacked + percent
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="fill", stat="identity")
data
microsp_orthogroups <- filter(orthogroups, is_microsp, species != 'R_allo')
outgroup_orthogroups <- filter(orthogroups, !is_microsp)
sum(microsp_orthogroups$num_lost_unclassified)
sum(microsp_orthogroups$num_lost_essential)
sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost)
sum(ougroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)
view(outgroup_orthogroups)
orthogroups %>%
filter(species != 'R_allo') %>%
lda
orthogroups %>%
filter(species != 'R_allo') %>%
group_by(is_microsp) %>%
summarise(percent_essential = num_lost_essential / num_lost)
view(data)
microsp_orthogroups <- filter(orthogroups, is_microsp, species != 'R_allo')
outgroup_orthogroups <- filter(orthogroups, !is_microsp)
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
percent_essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
percent_dispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
percent_unclassified = c(sum(microsp_orthogroups$num_lost_unclassified / microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified / outgroup_orthogroups$num_lost)))
table_to_plot
microsp_orthogroups <- filter(orthogroups, is_microsp, species != 'R_allo')
outgroup_orthogroups <- filter(orthogroups, !is_microsp)
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
percent_essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
percent_dispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
percent_unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost)))
table_to_plot
61 + 24 + 13
61 + 24 + 14
table_to_plot
?pivot_longer
percent_essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
percent_essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
percent_dispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
percent_unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost)))
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
percent_essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
percent_dispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
percent_unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost))) %>%
pivot_longer(cols = c('percent_essential', 'percent_dispensible', 'percent_unclassified'),
names_to = 'type',
values_to = 'percent')
table_to_plot
ggplot(table_to_plot, aes(x = group, y = percent, fill = type)) +
geom_bar()
ggplot(table_to_plot, aes(x = group, y = percent, fill = type)) +
geom_bar(stat = 'identity')
outgroup_orthogroups <- filter(orthogroups, !is_microsp)
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
ddispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost))) %>%
pivot_longer(cols = c('essential', 'dispensible', 'unclassified'),
names_to = 'type',
values_to = 'percent')
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
ddispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost))) %>%
pivot_longer(cols = c('essential', 'dispensible', 'unclassified'),
names_to = 'type',
values_to = 'percent')
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
dispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost))) %>%
pivot_longer(cols = c('essential', 'dispensible', 'unclassified'),
names_to = 'type',
values_to = 'percent')
ggplot(table_to_plot, aes(x = group, y = percent, fill = type)) +
geom_bar(stat = 'identity')
table_to_plot <- data.frame(group = c('Microsporidia', 'Outgroups'),
essential = c(sum(microsp_orthogroups$num_lost_essential) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_essential) / sum(outgroup_orthogroups$num_lost)),
dispensible = c(sum(microsp_orthogroups$num_lost_dispensable) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_dispensable) / sum(outgroup_orthogroups$num_lost)),
unclassified = c(sum(microsp_orthogroups$num_lost_unclassified) / sum(microsp_orthogroups$num_lost),
sum(outgroup_orthogroups$num_lost_unclassified) / sum(outgroup_orthogroups$num_lost))) %>%
pivot_longer(cols = c('essential', 'dispensible', 'unclassified'),
names_to = 'type',
values_to = 'percent')
ggplot(table_to_plot, aes(x = group, y = percent, fill = type)) +
geom_bar(stat = 'identity') +
labs(y = '% Lost amino acids in orthologs to yeast') +
theme_bw() +
theme(axis.title.x = element_blank(),
legend.title = element_blank(),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 18, color = 'black'))
ggplot(table_to_plot, aes(x = group, y = percent, fill = type)) +
geom_bar(stat = 'identity') +
labs(y = '% Lost amino acids in orthologs to yeast') +
theme_bw() +
theme(axis.title.x = element_blank(),
legend.title = element_blank(),
axis.title.y = element_text(size = 18),
axis.text = element_text(size = 18, color = 'black'),
legend.text = element_text(size = 18))
source("~/Desktop/Projects/snakemake_hmmscan/workflow/scripts/get_percent_lost_essential_AAs.R", echo=TRUE)
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
ortholog_alignments <- read_rds('../../resources/ortholog_alignments.rds')
orthogroups <- read_csv('../../data/orthogroups.csv')
view(ptc_data)
length(unique(ptc_data$gene))
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
yeast_domain_archs <- read_delim('../../resources/yeast_domains_resolved.txt')
view(yeast_domain_archs)
nrow(    yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, ', '),
resolved = str_c(resolved, ', ')) %>%
distinct(.keep_all = T))
nrow(    yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, ', '),
resolved = str_c(resolved, ', ')) %>%
distinct(`query-id`, .keep_all = T))
x =     yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, ', '),
resolved = str_c(resolved, ', ')) %>%
distinct(`query-id`, .keep_all = T)
view(x)
x =     yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = ', '),
resolved = str_c(resolved, collapse = ', ')) %>%
distinct(`query-id`, .keep_all = T)
view(x)
x =     yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = '; '),
resolved = str_c(resolved, collapse = '; ')) %>%
distinct(`query-id`, .keep_all = T)
view(x)
view(x)
as.integer('4')
as.integer('4') + as.integer('7')
domain_bounds <- '263-357; 372-453; 466-531; 593-695'
domain_bounds <- '345-389; 397-414,446-486'
domain_bounds <- str_split(domain_bounds, '; ')[[1]]
domain_bounds
tail(c(1, 2, 3, 4, 5))
tail(c(1, 2, 3, 4, 5), n = 1)
x = domain_bounds]1
x = domain_bounds[1]
str_split(tail(str_split(x, ', '), n = 1), '-')[i]
i = 2
str_split(tail(str_split(x, ', '), n = 1), '-')[i]
x
str_split(x, ', ')[[1]]
tail(str_split(x, ', ')[[1]], n = 1)
tail(str_split(x, ', ')[[1]], n = 1)
str_split(tail(str_split(x, ', ')[[1]], n = 1), '-')
str_split(tail(str_split(x, ', ')[[1]], n = 1), '-')[[1]]
str_split(tail(str_split(x, ', ')[[1]], n = 1), '-')[[1]][2]
x = domain_bounds[2]
x
str_split(tail(str_split(x, ', ')[[1]], n = 1), '-')[[1[i]
ln
str_split(tail(str_split(x, ', ')[[1]], n = 1), '-')[[1]][i]
i
tail(str_split(x, ', ')[[1]], n = 1)
tail(str_split(x, ',')[[1]], n = 1)
str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]
sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]}
)
unname(sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]}
))
i = 1
unname(sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]}
))
unname(sapply(
domain_bounds,
function(x) {str_split(head(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]}
))
unname(sapply(
domain_bounds,
function(x) {str_split(head(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]}
))
unname(sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][i]}
))
unname(sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][2]}
))
unname(sapply(
domain_bounds,
function(x) {str_split(head(str_split(x, ',')[[1]], n = 1), '-')[[1]][1]}
))
get_domain_starts_or_ends <- Vectorize(function(domain_bounds, get_ends) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
domain_bounds <- str_split(domain_bounds, '; ')[[1]]
if (get_ends) {
# get stop boundaries of each domain in the protein
bounds <- unname(sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][2]}
))
} else {
# get start boundaries of each domain in the protein
bounds <- unname(sapply(
domain_bounds,
function(x) {str_split(head(str_split(x, ',')[[1]], n = 1), '-')[[1]][1]}
))
}
return(str_c(bounds, collapse = ', '))
}, vectorize.args = c('domain_bounds', 'get_ends'))
?rename
colnames(ptc_data)
x =     yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = ', '),
resolved = str_c(resolved, collapse = '; ')) %>%
distinct(`query-id`, .keep_all = T) %>%
ungroup() %>%
mutate(domain_starts = get_domain_starts_or_ends(resolved, FALSE),
domain_ends = get_domain_starts_or_ends(resolved, TRUE)) %>%
select(`query-id`, `match-id`, domain_starts, domain_ends) %>%
rename(gene = `query-id`, domain_arch = `match-id`)
view(x)
x =     yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = ', '),
resolved = str_c(resolved, collapse = '; ')) %>%
distinct(`query-id`, .keep_all = T) %>%
ungroup() %>%
mutate(domain_starts = get_domain_starts_or_ends(resolved, FALSE),
domain_ends = get_domain_starts_or_ends(resolved, TRUE)) %>%
# select(`query-id`, `match-id`, domain_starts, domain_ends) %>%
rename(gene = `query-id`, domain_arch = `match-id`)
view(x)
format_yeast_domain_archs <- function(yeast_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
return(
yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = ', '),
resolved = str_c(resolved, collapse = '; ')) %>%
distinct(`query-id`, .keep_all = T) %>%
ungroup() %>%
mutate(domain_starts = get_domain_starts_or_ends(resolved, FALSE),
domain_ends = get_domain_starts_or_ends(resolved, TRUE)) %>%
# select(`query-id`, `match-id`, domain_starts, domain_ends) %>%
rename(gene = `query-id`, domain_arch = `match-id`)
)
}
# -----------------------------------------------------------------------------
#
# Annotate essentiality/dispensablility of lost ortholog domains using yeast
# PTC data
#
# Jason Jiang - Created: 2022/09/19
#               Last edited: 2022/09/19
#
# Reinke Lab - Microsporidia orthologs
#
# -----------------------------------------------------------------------------
library(tidyverse)
library(readxl)
################################################################################
main <- function() {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# args <- commandArgs(trailingOnly = T)
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
yeast_domain_archs <- format_yeast_domain_archs(
read_delim('../../resources/yeast_domains_resolved.txt')
)
}
################################################################################
## Helper functions
format_ptc_data <- function(ptc_data, sgd_to_uniprot_names) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
return(
ptc_data %>%
select(Gene, CDS_length, dist_from_CDS_end, `HMM PTC classification`) %>%
rename(gene = Gene, protein_length = CDS_length,
dist_from_cds_end = dist_from_CDS_end,
ptc_tolerance = `HMM PTC classification`) %>%
filter(!is.na(ptc_tolerance)) %>%
mutate(ptc_position = protein_length - dist_from_cds_end,
# original CDS_length column included stop codon in length
protein_length = protein_length - 1) %>%
group_by(gene) %>%
arrange(ptc_position, .by_group = T) %>%
mutate(ptc_tolerance = str_c(ptc_tolerance, collapse = ', '),
ptc_position = str_c(as.character(ptc_position), collapse = ', ')) %>%
select(-dist_from_cds_end) %>%
distinct(.keep_all = T) %>%
ungroup() %>%
mutate(critical_ptc_position = get_critical_ptc_position(ptc_tolerance,
ptc_position)) %>%
rowwise() %>%
mutate(gene = sgd_to_uniprot_names[[gene]])
)
}
format_yeast_domain_archs <- function(yeast_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
return(
yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = ', '),
resolved = str_c(resolved, collapse = '; ')) %>%
distinct(`query-id`, .keep_all = T) %>%
ungroup() %>%
mutate(domain_starts = get_domain_starts_or_ends(resolved, FALSE),
domain_ends = get_domain_starts_or_ends(resolved, TRUE)) %>%
# select(`query-id`, `match-id`, domain_starts, domain_ends) %>%
rename(gene = `query-id`, domain_arch = `match-id`)
)
}
get_domain_starts_or_ends <- Vectorize(function(domain_bounds, get_ends) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
domain_bounds <- str_split(domain_bounds, '; ')[[1]]
if (get_ends) {
# get stop boundaries of each domain in the protein
bounds <- unname(sapply(
domain_bounds,
function(x) {str_split(tail(str_split(x, ',')[[1]], n = 1), '-')[[1]][2]}
))
} else {
# get start boundaries of each domain in the protein
bounds <- unname(sapply(
domain_bounds,
function(x) {str_split(head(str_split(x, ',')[[1]], n = 1), '-')[[1]][1]}
))
}
return(str_c(bounds, collapse = ', '))
}, vectorize.args = c('domain_bounds', 'get_ends'))
################################################################################
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
get_critical_ptc_position <- Vectorize(function(ptc_tolerance, ptc_position) {
# ---------------------------------------------------------------------------
# Return corresponding position of the last lethal PTC in a gene
# ---------------------------------------------------------------------------
ptc_tolerance <- str_split(ptc_tolerance, ', ')[[1]]
ptc_position <- str_split(ptc_position, ', ')[[1]]
# corresponding ptc position in gene for last lethal ptc
critical_ptc_position <- ptc_position[tail(which(ptc_tolerance == 'D'), n = 1)]
if (length(critical_ptc_position) == 0) {
# all PTCs in this gene are tolerated
return(NA)
}
return(critical_ptc_position)
}, vectorize.args = c('ptc_tolerance', 'ptc_position'))
sgd_to_uniprot_names <- read_rds('../../data/yeast_genome_to_uniprot.rds')
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
yeast_domain_archs <- format_yeast_domain_archs(
read_delim('../../resources/yeast_domains_resolved.txt')
)
view(ptc_data)
view(yeast_domain_archs)
format_yeast_domain_archs <- function(yeast_domain_archs) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
return(
yeast_domain_archs %>%
group_by(`query-id`) %>%
mutate(`match-id` = str_c(`match-id`, collapse = ', '),
resolved = str_c(resolved, collapse = '; ')) %>%
distinct(`query-id`, .keep_all = T) %>%
ungroup() %>%
mutate(domain_starts = get_domain_starts_or_ends(resolved, FALSE),
domain_ends = get_domain_starts_or_ends(resolved, TRUE)) %>%
# select(`query-id`, `match-id`, domain_starts, domain_ends) %>%
rename(gene = `query-id`, domain_arch = `match-id`) %>%
select(gene, domain_arch, domain_starts, domain_ends)
)
}
ptc_data <- format_ptc_data(readxl::read_xls('../../data/supp_11.xls'),
sgd_to_uniprot_names)
yeast_domain_archs <- format_yeast_domain_archs(
read_delim('../../resources/yeast_domains_resolved.txt')
)
colnames(ptc_data)
colnames(yeast_domain_archs)
?full_join
joined <- full_join(ptc_data, yeast_domain_archs, by = 'gene')
view(joined)
joined <- inner_join(ptc_data, yeast_domain_archs, by = 'gene')
view(joined)
joined <- left_join(ptc_data, yeast_domain_archs, by = 'gene')
view(joined)
rm(joined)
# add domain arch data to ptc data
ptc_data <- left_join(ptc_data, yeast_domain_archs, by = 'gene')
view(ptc_data)
nrow(filter(ptc_data, !is.na(ptc_tolerance)))
view(ptc_data)
